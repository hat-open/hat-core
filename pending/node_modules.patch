--- node_modules/js-yaml/lib/js-yaml/common.js
+++ node_modules/js-yaml/lib/js-yaml/common.js
@@ -51,9 +51,18 @@
 }


+function constructScientific(string) {
+    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
+    var SCIENTIFIC_WITHOUT_SIGN = /e[0-9]+$/;
+    string = SCIENTIFIC_WITHOUT_DOT.test(string) ? string.replace('e', '.e') : string;
+    return SCIENTIFIC_WITHOUT_SIGN.test(string) ? string.replace('e', 'e+') : string;
+}
+
+
 module.exports.isNothing      = isNothing;
 module.exports.isObject       = isObject;
 module.exports.toArray        = toArray;
 module.exports.repeat         = repeat;
 module.exports.isNegativeZero = isNegativeZero;
 module.exports.extend         = extend;
+module.exports.constructScientific = constructScientific;


--- node_modules/js-yaml/lib/js-yaml/type/float.js
+++ node_modules/js-yaml/lib/js-yaml/type/float.js
@@ -4,11 +4,11 @@
 var Type   = require('../type');

 var YAML_FLOAT_PATTERN = new RegExp(
-  // 2.5e4, 2.5 and integers
-  '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
+  // 2.5e+4, 2.5 and integers
+  '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*(?:[eE][-+][0-9]+)?)?' +
   // .2e4, .2
   // special case, seems not from spec
-  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
+  '|\\.[0-9_]+(?:[eE][-+][0-9]+)?' +
   // 20:59
   '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
   // .inf
@@ -66,8 +66,6 @@
 }


-var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
-
 function representYamlFloat(object, style) {
   var res;

@@ -95,10 +93,7 @@

   res = object.toString(10);

-  // JS stringifier can build scientific format without dots: 5e-100,
-  // while YAML requres dot: 5.e-100. Fix it with simple hack
-
-  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
+  return common.constructScientific(res)
 }

 function isFloat(object) {


--- node_modules/js-yaml/lib/js-yaml/type/int.js
+++ node_modules/js-yaml/lib/js-yaml/type/int.js
@@ -159,7 +159,7 @@
   represent: {
     binary:      function (object) { return '0b' + object.toString(2); },
     octal:       function (object) { return '0'  + object.toString(8); },
-    decimal:     function (object) { return        object.toString(10); },
+    decimal:     function (object) { return        common.constructScientific(object.toString(10)); },
     hexadecimal: function (object) { return '0x' + object.toString(16).toUpperCase(); }
   },
   defaultStyle: 'decimal',
